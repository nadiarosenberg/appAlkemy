"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugContextDevtool = exports.ContextDevTool = void 0;
var react_1 = __importDefault(require("react"));
var debugOptions = {
    debugReducer: true,
    debugContext: true,
    disable: false,
    disableAutoMode: false,
};
var ContextDevTool = function (_a) {
    var id = _a.id, Context = _a.context, displayName = _a.displayName;
    if (debugOptions.disable) {
        return null;
    }
    return (react_1.default.createElement(Context.Consumer, null, function (values) {
        if (typeof window !== "undefined" && window._REACT_CONTEXT_DEVTOOL) {
            window._REACT_CONTEXT_DEVTOOL({ id: id, displayName: displayName, values: values });
        }
        return null;
    }));
};
exports.ContextDevTool = ContextDevTool;
var debugContextDevtool = function (container, options) {
    debugOptions = __assign(__assign({}, debugOptions), options);
    if (debugOptions.disable ||
        debugOptions.disableAutoMode ||
        typeof window === "undefined" ||
        (!debugOptions.debugReducer && !debugOptions.debugContext)) {
        return false;
    }
    var hook = window.__REACT_CONTEXT_DEVTOOL_GLOBAL_HOOK;
    if (hook && hook.debugFiber) {
        if (hook.helpers &&
            hook.helpers.loadHookHelper &&
            debugOptions.debugReducer) {
            hook.helpers.loadHookHelper().then(function () {
                hook.debugFiber(container, options);
            });
        }
        else {
            hook.debugFiber(container, options);
        }
    }
};
exports.debugContextDevtool = debugContextDevtool;
